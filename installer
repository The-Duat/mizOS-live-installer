#!/bin/bash
set -e

# Introduction
clear
echo "[----mizOS System Installer----]"
echo -e -n "\nThis installer will walk you through the mizOS installation process.\n\nPlease verify that your BIOS is set to boot in UEFI mode before continuing.\n\nType \"97\" to continue, hit enter to terminate installation.\n\n> "
read ans
if [ "$ans" != "97" ]; then
	echo "Installation terminated."
	exit
fi





# Partitioning disks
clear
echo -e "[ Partitioning disks ]\n"

echo -e "Current disk layout:\n"
lsblk

echo -e -n "\nPlease input the drive (not partiton!!!) you want to install mizOS onto. (e.x. sda, nvme0n1)\n\n> "
read basedrive
echo -e -n "\nIs \"$basedrive\" the drive you want to install to? (y/n)\n> "
read ans
if [ "$ans" != "y" ]; then
	echo "Drive disagreement. Installation terminated."
	exit
fi
clear

echo -e "The mizOS installer will now walk you through partitioning your disk."
echo -e "\nmizOS needs at least 2 partitions to install:"
echo -e "   ||>- Boot partition | Recommended size: 512MiB - 1024MiB"
echo -e "   ||>- Root partition | Recommended size: 30GiB or greater."
echo -e "      - Swap partition | Recommended size: Same as RAM or greater."
echo -e "        (swap is optional)"
echo -e "\nThe mizOS installer does not currently support the creation of a seperate /home partition."
echo -e "\n - ONLY if it doesn't exist already, please create a Boot partiton of type EFI."
echo -e " - Create a Root partiton of type \"Linux\""
echo -e " - Optionally, create a partition for swap."
echo -e "\n| If you have already partitioned your disks, type \"x\""
echo -e "| If you need to partition your disks, type \"cfdisk\" to launch a disk partitioning utility."
echo -e "!! Warning !! Disk partitioning may delete data, or leave your current operating system in an inoperable state if done correctly."

while true; do
	echo -e -n "\n> "
	read ans
	if [ "$ans" = "x" ]; then
		break
	elif [ "$ans" = "cfdisk" ]; then
		cfdisk /dev/$basedrive
		break
	fi
done





# Selecting partitions
clear

echo -e "[ Selecting partitions - Boot ]\n"
lsblk

while true; do
	echo -e -n "\nPlease enter the partition to use for Boot (e.x. sda1, nvme0n1p1)\n\n> "
	read BOOTPART
	echo -e -n "\n\nIs $BOOTPART (/dev/$BOOTPART) correct? (y/n)\n\n> "
	read ans
	if [ "$ans" = "y" ]; then
		echo -e "\nWill you be reformatting this partiton? Reformatting the Boot partition could destroy the bootloaders of other installed operating systems. (y/n)"
		read ans
		if [ "$ans" = "y" ]; then
			DELBOOT=1
		fi
		break
	fi
done


clear

echo -e "[ Selecting partitions - Root ]\n"
lsblk

while true; do
	echo -e -n "\nPlease enter the partition to use for Root (e.x. sda2, nvme0n1p2)\n\n> "
	read ROOTPART
	echo -e -n "\n\nIs $ROOTPART (/dev/$ROOTPART) correct? (y/n)\n\n> "
	read ans
	if [ "$ans" = "y" ]; then
		break
	fi
done


clear

echo -e "[ Selecting partitions - Swap ]\n"
lsblk

while true; do
	echo -e "\nPlease enter the partition to use for Swap (e.x. sda3, nvme0n1p3)"
	echo -e -n "If you have decided to do without a swap partition, enter \"x\".\n\n> "
	read SWAPPART
	if [ "$SWAPPART" = "x" ]; then
		NOSWAP=1
		break
	fi
	echo -e -n "\n\nIs $SWAPPART (/dev/$SWAPPART) correct? (y/n)\n\n> "
	read ans
	if [ "$ans" = "y" ]; then
		break
	fi
done





# The Final Interaction
clear
echo -e "[ Our final moments together... ]\n\n"
lsblk
echo -e "\nSelected Boot partition: /dev/$BOOTPART"
echo "Selected Root partition: /dev/$ROOTPART"
if [ $NOSWAP = 1 ]; then
	echo "No swap partition has been selected."
else
	echo "Selected Swap partition: /dev/$SWAPPART"
fi
if [ $DELBOOT = 1 ]; then
	echo -e "\nBoot partiton will be reformatted."
else
	echo -e "\nBoot partition will not be reformatted."
fi

echo -e "\n\nThese are our final moments together for a while. I need you to verify that the above information is correct before proceeding."

echo -e -n "\nProceed? This action is irreversible. (y/n)"
while true; do
	echo -e -n "\n\n> "
	read ans
	if [ "$ans" = "y" ]; then
		break
	fi
done

clear

echo "Installation will start in "
for (( i=10; i>=1; i-- )); do
	echo "$i"
	sleep 1
done





# Formatting partitions.
clear
echo "[ Formatting partitions ]"
echo "This may take a while."

echo -e "\nFormatting Root (/dev/$ROOTPART) as ext4."
mkfs.ext4 /dev/$ROOTPART

if [ $DELBOOT = 1 ]; then
	echo "Formatting Boot (/dev/$BOOTPART) as fat32."
	mkfs.fat -F 32 /dev/$BOOTPART
fi

if [ $NOSWAP != 1 ]; then
	echo "Initializing Swap partition (/dev/$SWAPPART)"
	mkswap /dev/$SWAPPART
fi





# Preparing installation.
clear
echo "[ Preparing installation ]"
echo -e "\n\nMounting Root partition (/dev/$ROOTPART) to /mnt"
mount /dev/$ROOTPART /mnt
echo "Creating /mnt/boot"
mkdir /mnt/boot
echo "Mounting Boot partition (/dev/$BOOTPART) to /mnt/boot"
mount /dev/$BOOTPART /mnt/boot
if [ $NOSWAP != 1 ]; then
	echo "Enabling swap."
	swapon /dev/$SWAPPART
fi





# Installing base system software
clear
echo "[ Installing base system software ]"
echo -e "\n\nInstalling \"base\", \"linux\", and \"linux-firmware\""
pacstrap -K /mnt base linux linux-firmware

echo -e "\n\nGenerating fstab."
genfstab -U /mnt >> /mnt/etc/fstab


echo -e "\n\nChanging root to new system."
# arch-chroot /mnt /bin/bash <<EOF
cat << EOF > installer2
echo -e "\nInstalling needed system software."
pacman -S grub efibootmgr gcc lua git make





# Timezone selection
clear
echo "[ Timezone selection ]"

while true; do
	echo -e "\n\nPlease select your timezone region:\n"
	ls /usr/share/zoneinfo
	echo -e -n "\n> "
	read REGION
	if [ -d "/usr/share/zoneinfo/$REGION" ]; then
		break
	fi
done

while true; do
	echo -e "\n\nPlease select your correspondong city:\n"
	ls /usr/share/zoneinfo/$REGION
	read CITY
	if [ -f "/usr/share/zoneinfo/$REGION/$CITY" ]; then
		break
	fi
done

echo -e "\nSetting timezone to $REGION/$CITY"
ln -sf /usr/share/zoneinfo/$REGION/$CITY /etc/localtime
echo "Generating /etc/adjtime"
hwclock --systohc





# Locales
clear
echo "[ Locales ]"
echo -e "\nCompiling software."
gcc localeset.c
echo -e "\nSetting en_US.UTF-8 UTF"
chmod +x a.out
./a.out locale
echo -e "\nGenerating locales."
locale-gen
echo -e "\nSetting /etc/locale.conf"
touch /etc/locale.conf
echo "LANG=en_US.UTF-8" > /etc/locale.conf





# System info
clear
echo "[ System info ]"
echo -e -n "\n\nPlease enter a hostname."
while true; do
	echo -e -n "\n\n> "
	read HOSTNAME
	echo -e -n "\n Is \"$HOSTNAME\" your desired hostname? (y/n)\n\n> "
	read ans
	if [ "$ans" == "y" ]; then
		break
	fi
done

echo -e "\n\nPlease enter the password to use for the Root account."
passwd
echo -e "\n\nPlease enter a username for the normal non-root user."
echo -n "This user will be a sudoer. You can create more users after installation."
while true; do
	echo -e -n "\n\n> "
	read USERNAME
	echo -e -n "\nSelect \"$USERNAME\" as your username? (y/n)\n\n> "
	read ans
	if [ "$ans" == "y" ]; then
		break
	fi

done
useradd $USERNAME

echo -e "\n\nCreate a password for the newly added user.\n\n"
passwd $USERNAME
echo -e "\nAdding user to group \"wheel\"."
usermod -aG $USERNAME wheel
echo -e "\nGranting sudo permission to group \"wheel\"."





# Bootloader
clear
echo "[ Bootloader ]"
echo -e "\nInstalling GRUB bootloader.\n"
grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB





# Graphics Drivers
clear
echo "[ Graphics Drivers ]"
while true; do
	echo -e "\nPlease select which graphics drivers to install:"
	echo "   1.     (AMD) Radeon"
	echo "   2.     (AMD) AMDVLK"
	echo "   3.   (Intel) Intel"
	echo "   4.  (Nvidia) Nvidia Proprietary"
	echo "   5.  (Nvidia) Nvidia Nouveau"
	echo "   6.      (VM) QXL"
	echo -e -n "\n> "
	read driver

	if [ $driver == "1" ]; then
		pacman -S mesa lib32-mesa xf86-video-amdgpu vulkan-radeon lib32-vulkan-radeon libva-mesa-driver lib32-libva-mesa-driver mesa-vdpau lib32-mesa-vdpau
		break
	elif [ $driver == "2" ]; then
		pacman -S mesa lib32-mesa xf86-video-amdgpu amdvlk lib32-amdvlk libva-mesa-driver lib32-libva-mesa-driver mesa-vdpau lib32-mesa-vdpau
		break
	elif [ $driver == "3" ]; then
		pacman -S mesa lib32-mesa xf86-video-intel vulkan-intel lib32-vulkan-intel
		break
	elif [ $driver == "4" ]; then
		pacman -S nvidia lib32-nvidia-utils
		break
	elif [ $driver == "5" ]; then
		pacman -S mesa lib32-mesa xf86-video-nouveau
		break
	elif [ $driver == "6" ]; then
		pacman -S mesa xf86-video-qxl
		break
	fi
done





# mizOS system overwrite
clear
echo "[ mizOS System Overwrite ]"
echo -e "\nA base Arch Linux system has been installed."
echo -e "\nIn order to overwrite Arch Linux with mizOS, you need to sign into the non-root user you have created ($USERNAME)."
echo -e "\nPlease enter the password for $USERNAME"
su $USERNAME

cd ~
mkdir installer
cd installer
git clone https://github.com/the-duat/mizos
cd mizos
sudo chmod +x install
./install
EOF

mv installer2 /mnt/root
arch-chroot /mnt /bin/bash <<EOF
cd /root && chmod 777 installer2 && ./installer
EOF
